#   Задание "Слишком древний шифр":
#
#   Вы отправились в путешествие на необитаемый остров и конечно же в очередной вылазке в джунгли вы попали
# в ловушку местному племени (да-да, классика "Индиана Джонса"). К вашему удивлению, в племени были неплохие
# математики и по совместительству фантазёры.
#
#   Вы поняли это, когда после долгих блужданий перед вами появились ворота (выход из ловушки)
# с двумя каменными вставками для чисел. В первом поле камни с числом менялись постоянно (от 3 до 20)
# случайным образом, а второе было всегда пустым.
#
#   К вашему счастью рядом с менее успешными и уже неговорящими путешественниками находился папирус,
# где были написаны правила для решения этого "ребуса". (Как жаль, что они поняли это так поздно).
#
#   Во вторую вставку нужно было написать те пары чисел друг за другом, чтобы число из первой вставки
# было кратно(делилось без остатка) сумме их значений.
#
# Пример 1:
# 9 - число из первой вставки
# 1218273645 - нужный пароль (1 и 2, 1 и 8, 2 и 7, 3 и 6, 4 и 5 - пары; число 9 кратно сумме каждой пары)
#
#   Составьте алгоритм, используя циклы, чтобы в независимости от введённого числа n (от 3 до 20)
# программа выдавала нужный пароль result, для одного введённого числа.

stone_pair = list()


def store_stone_pair_for(number):
    global stone_pair
    for i in range(1, number // 2 + 1):
        if i == number - i:
            continue
        sp = f'{i}{number - i}'
        stone_pair.append(sp)


def print_stone_pair():
    global stone_pair
    stone_pair.sort()
    print('Пары: ', end='')
    for s_p in stone_pair:
        print(s_p, end='  ')
    print()


def print_password():
    global stone_pair
    stone_pair.sort()
    print('Пароль: ', end='')
    for s_p in stone_pair:
        print(s_p, end='')
    print()

# Выход из "вечного" цикла - любое число, кроме диапазона 3..20
while True:
    stone_1 = int(input("\nЧисло на первом камне (3..20): "))
    if not 3 <= stone_1 <= 20:
        break

    stone_pair.clear()
    for k in range(2, stone_1 + 1):
        if stone_1 % k == 0:
            divider = k
            store_stone_pair_for(divider)
    print_stone_pair()
    print_password()
